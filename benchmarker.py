
import bpy 

import io
import os
import sys
import shlex
import pstats
import platform
import cProfile
import subprocess

from . utils import RunningOperator


class PLUGINPROFILER_OT_benchmarker(RunningOperator):
    """https://stackoverflow.com/questions/582336/how-do-i-profile-a-python-script"""

    bl_idname = "pluginprofiler.benchmarker"

    def start(self):
        
        print("\n","Starting Benchmark","\n")
        cls = PLUGINPROFILER_OT_benchmarker

        #reset stats 
        cls.stats_string = None
        cls.stats_pstats = None
        
        #start recording
        cls.app = cProfile.Profile()
        cls.app.enable()

        return None 

    def end(self):

        cls = PLUGINPROFILER_OT_benchmarker
        if (cls.app is None): 
            return None

        #finish cProfile process
        print("\n","Ending cProfiler","\n")
        cls.app.disable()

        #generate stats
        cls.stats_string = io.StringIO()
        cls.stats_pstats = pstats.Stats(cls.app, stream=cls.stats_string).sort_stats(pstats.SortKey.CUMULATIVE)
        
        return None 


class PLUGINPROFILER_OT_benchmarkops(bpy.types.Operator):
    """variery of operations on resulted benchmark generated by `pluginprofiler.benchmarker`"""

    bl_idname = "plugin_profiler.benchmarkops"
    bl_label = "Save Log"
    bl_description = ""
    bl_options = {'INTERNAL'}

    directory : bpy.props.StringProperty(subtype="DIR_PATH")
    filepath: bpy.props.StringProperty(subtype="FILE_PATH")
    operation : bpy.props.StringProperty(default="", options={"SKIP_SAVE","HIDDEN"},) #print|save_log|run_viz
    
    def invoke(self, context, event):

        if (self.operation=="save_log"):
            context.window_manager.fileselect_add(self)
        else:
            return self.execute(context)
        
        return {'RUNNING_MODAL'} #also calls execute but prevents the fileselect from crashing

    @classmethod
    def poll(cls, context, ):
        """did the benchmarket operator left data for us to use?"""

        benchmark_operator = PLUGINPROFILER_OT_benchmarker

        if (not hasattr(benchmark_operator,"stats_string")):
            return False

        if (benchmark_operator.stats_string is None):
            return False

        return True

    def print_stats(self, prefs, stats_string, stats_pstats): 

        stats_pstats.print_stats()
        print(stats_string.getvalue()) 

        return None

    def save_log(self, prefs, stats_string, stats_pstats):

        path = f"{self.filepath}-plugin_profiler_export.log"
        stats_pstats.dump_stats(path)

        return None

    def run_viz_app(self, prefs, stats_string, stats_pstats): 

        #define filename
        filename = f"plugin_profiler_temp.log"
                
        #define a local path for our temp log
        #so we'll be able to directly launch the viz sofware from console 

        if (platform.system()=="Windows"):
            localpath = os.path.dirname(bpy.utils.resource_path("LOCAL"))
        
        elif (platform.system()=="Darwin"):
            localpath = os.path.dirname(bpy.utils.resource_path("USER"))
            localpath = os.path.join(localpath, 'logs')
            os.makedirs(localpath, exist_ok=True, )
        
        elif (platform.system()=="Linux"):
            raise Exception("Oops, looks like i do not have a Linux machine and i have no idea how to implement this part of the code, please submit a little patch ;-)")
        
        else: 
            raise Exception("Os not supported")
            
        #dump temp stats
        path = os.path.join(localpath,filename)
        stats_pstats.dump_stats(path)

        #define command to run viz app

        if (platform.system()=="Windows"):
            path = f"\"{path}\"" #adding " as prefix and suffix to validate paths containing whitespaces
            command = f"python -m snakeviz {path}"
        
        elif (platform.system()=="Darwin"):
            command = f"{sys.executable} -m snakeviz '{localpath}'"
        
        elif (platform.system()=="Linux"):
            raise Exception("Oops, looks like you also need to implement console command here, thank you very much")
        
        #launch command
        try:
            print("\n",f"Trying to run 'snakeviz' via subprocess.Popen('{command}')","\n")
            subprocess.Popen(shlex.split(command))
        except Exception as e: 
            print("\n","VizApp failed, did you tried to 'pip install snakeviz'?","\n")

        return None

    def execute(self, context):

        prefs = bpy.context.preferences.addons["Plugin-Profiler"].preferences

        benchmark_operator = PLUGINPROFILER_OT_benchmarker
        stats_string = benchmark_operator.stats_string
        stats_pstats = benchmark_operator.stats_pstats

        if (self.operation=="print"):
            self.print_stats(prefs, stats_string, stats_pstats)

        elif (self.operation=="save_log"):
            #will call fileselect_add() first on invoke
            self.save_log(prefs, stats_string, stats_pstats)

        elif (self.operation=="run_viz"):
            self.run_viz_app(prefs, stats_string, stats_pstats)

        return {'FINISHED'}